* Bio-informatic Algorithms
	The continuing quest to learn algorithms and data structure used in
	bioinformatics, and their implementation in Haskell.

	I am stuck with the same ideas, have not been able to break new ground.

** Plotting in Haskell
	 Plotting is essential in any scientific field. However Haskell is not
	 particularly helpful in producing interactive plots. We can take this as an
	 opportunity in  scripting our plots --- this requires learning more about
	 Haskell charts. Interactive plotting readily becomes hectic hacking away to
	 get the plot right. We can do the same if we have to script the plot --
	 however we will have to think more and the end-result of our efforts will be
	 preserved in the script. 

*** TODO <2017-01-06 Fre> center the GC diff plot around its minima.

** Faster pattern finding
   While we have used dictionaries (Haskell Map) to implement pattern finding 
   algorithms, Compeau and Pevzner suggest using Frequency Arrays. 
   Frequency Arrays work with mapping the four (can be five if 'N' is allowed)
   nucleotides to numbers, and using a positional factor to convert strings of
   nucleotides to numbers. For a pattern of length $k$, there are $4^k$ possible
   strings, and hence the numbers will range from $0$ to $4^k - 1$. This number
   will be prohibitively large even for moderate values of $k$. However for the
   problem of locating the origin of replication, $k$ is typically smaller
   than 10, and the frequency array will be of the order of a million. We can
   implement the same pattern search algorithms using the frequency array under
   their own module.
